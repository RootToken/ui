{"version":3,"file":"DecimalBigNumber.umd.js","sources":["../js/utils/DecimalBigNumber.js"],"sourcesContent":["import { formatUnits, parseUnits, commify } from \"ethers/lib/utils\";\nexport function assert(value, message) {\n    if (value === false || value === null || typeof value === \"undefined\") {\n        throw new Error(message || \"Assertion failed\");\n    }\n}\n/**\n *\n * @export\n * @class DecimalBigNumber\n */\nexport class DecimalBigNumber {\n    constructor(value, decimals) {\n        if (typeof value === \"string\") {\n            const _value = value.trim() === \"\" || isNaN(Number(value)) ? \"0\" : value;\n            const _decimals = decimals === undefined ? this._inferDecimalAmount(value) : this._ensurePositive(decimals);\n            const formatted = this._setDecimalAmount(_value, _decimals);\n            this._value = parseUnits(formatted, _decimals);\n            this._decimals = _decimals;\n            return;\n        }\n        assert(decimals !== undefined, \"Decimal cannot be undefined\");\n        this._value = value;\n        this._decimals = decimals;\n    }\n    getDecimals() {\n        return this._decimals;\n    }\n    _inferDecimalAmount(value) {\n        const [, decimalStringOrUndefined] = value.split(\".\");\n        return decimalStringOrUndefined?.length || 0;\n    }\n    /**\n     * Sets a value to a specific decimal amount\n     *\n     * Trims unnecessary decimals\n     * Or pads decimals if needed\n     *\n     * @param value Input value as a string\n     * @param decimals Desired decimal amount\n     */\n    _setDecimalAmount(value, decimals) {\n        const [integer, _decimalsOrUndefined] = value.split(\".\");\n        const _decimals = _decimalsOrUndefined || \"\";\n        const paddingRequired = this._ensurePositive(decimals - _decimals.length);\n        return integer + \".\" + _decimals.substring(0, decimals) + \"0\".repeat(paddingRequired);\n    }\n    /**\n     * Ensures the desired decimal amount is positive\n     */\n    _ensurePositive(decimals) {\n        return Math.max(0, decimals);\n    }\n    /**\n     * Converts this value to a BigNumber\n     *\n     * Often used when passing this value as\n     * an argument to a contract method\n     */\n    toBigNumber(decimals) {\n        return decimals === undefined ? this._value : new DecimalBigNumber(this.toString(), decimals)._value;\n    }\n    /**\n     * Converts to a different decimal\n     */\n    reDecimal(decimals) {\n        return decimals === this._decimals ? this : new DecimalBigNumber(this.toString(), decimals);\n    }\n    /**\n     * Converts this value to a string\n     *\n     * By default, the string returned will:\n     * - Have the same decimal amount that it was initialized with\n     * - Have trailing zeroes removed\n     * - Not have thousands separators\n     *\n     * This ensures that the number string is accurate.\n     *\n     * To override any of these settings, add the `args` object as a parameter.\n     *\n     * @param args an object containing any of the properties: decimals, trim, format\n     * @returns a string version of the number\n     */\n    toString({ decimals, trim = true, format = false } = {}) {\n        let result = formatUnits(this._value, this._decimals);\n        // Add thousands separators\n        if (format)\n            result = commify(result);\n        // We default to the number of decimal places specified\n        const _decimals = decimals === undefined ? this._decimals : this._ensurePositive(decimals);\n        result = this._setDecimalAmount(result, _decimals);\n        // We default to trimming trailing zeroes (and decimal points), unless there is an override\n        if (trim)\n            result = result.replace(/(?:\\.|(\\..*?))\\.?0*$/, \"$1\");\n        return result;\n    }\n    /**\n     * @deprecated\n     * Please avoid using this method.\n     * If used for calculations: rather than converting this DecimalBigNumber\n     * \"down\" to a number, convert the other number \"up\" to a DecimalBigNumber.\n     *\n     * Used when performing approximate calculations with\n     * the number where precision __is not__ important.\n     *\n     * Ex: (new DecimalBigNumber(\"100\", 6)).toApproxNumber() => 100\n     */\n    toApproxNumber() {\n        return parseFloat(this.toString());\n    }\n    /**\n     * Determines if the two values are equal\n     */\n    eq(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        // Normalize decimals to the largest of the two values\n        const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n        // Normalize values to the correct decimal amount\n        const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n        const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n        return normalisedThis._value.eq(normalisedValue._value);\n    }\n    /**\n     * Subtracts this value by the value provided\n     */\n    sub(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        // Normalize decimals to the largest of the two values\n        const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n        // Normalize values to the correct decimal amount\n        const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n        const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n        return new DecimalBigNumber(normalisedThis._value.sub(normalisedValue._value), largestDecimalAmount);\n    }\n    /**\n     * Sums this value and the value provided\n     */\n    add(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        // Normalize decimals to the largest of the two values\n        const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n        // Normalize values to the correct decimal amount\n        const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n        const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n        return new DecimalBigNumber(normalisedThis._value.add(normalisedValue._value), largestDecimalAmount);\n    }\n    isPositive() {\n        return this._value.gte(0);\n    }\n    /**\n     * Determines if this value is greater than the provided value\n     */\n    gt(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        // Normalize decimals to the largest of the two values\n        const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n        // Normalize values to the correct decimal amount\n        const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n        const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n        return normalisedThis._value.gt(normalisedValue._value);\n    }\n    /**\n     * Determines if this value is greater than or equal to the provided value\n     */\n    gte(value) {\n        return this.gt(value) || this.eq(value);\n    }\n    /**\n     * Determines if this value is less than the provided value\n     */\n    lt(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        // Normalize decimals to the largest of the two values\n        const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n        // Normalize values to the correct decimal amount\n        const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n        const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n        return normalisedThis._value.lt(normalisedValue._value);\n    }\n    /**\n     * Determines if this value is less than or equal to the provided value\n     */\n    lte(value) {\n        return this.lt(value) || this.eq(value);\n    }\n    /**\n     * Multiplies this value by the provided value\n     */\n    mul(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        const product = this._value.mul(valueAsDBN._value);\n        // Multiplying two BigNumbers produces a product with a decimal\n        // amount equal to the sum of the decimal amounts of the two input numbers\n        return new DecimalBigNumber(product, this._decimals + valueAsDBN._decimals);\n    }\n    mod(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        return new DecimalBigNumber(this._value.mod(valueAsDBN._value), this._decimals);\n    }\n    mulMod(value, denominator) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        const denominatorAsDBN = denominator instanceof DecimalBigNumber ? denominator : new DecimalBigNumber(denominator);\n        const result = this._value.mul(valueAsDBN._value).mod(denominatorAsDBN._value);\n        return new DecimalBigNumber(result, this._decimals);\n    }\n    mulDiv(value, denominator, rounding) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        const denominatorAsDBN = denominator instanceof DecimalBigNumber ? denominator : new DecimalBigNumber(denominator);\n        let result = this._value.mul(valueAsDBN._value).div(denominatorAsDBN._value);\n        if (rounding === \"up\" && this.mulMod(value, denominator).gt(\"0\")) {\n            result = result.add(1);\n        }\n        return new DecimalBigNumber(result, this._decimals);\n    }\n    /**\n     * Divides this value by the provided value\n     *\n     * By default, this returns a value whose decimal amount is equal\n     * to the sum of the decimal amounts of the two values used.\n     * If this isn't enough, you can specify a desired\n     * decimal amount using the second function argument.\n     *\n     * @param decimals The expected decimal amount of the output value\n     */\n    div(value, decimals) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        const _decimals = decimals === undefined ? this._decimals + valueAsDBN._decimals : this._ensurePositive(decimals);\n        // When we divide two BigNumbers, the result will never\n        // include any decimal places because BigNumber only deals\n        // with whole integer values. Therefore, in order for us to\n        // include a specific decimal amount in our calculation, we need to\n        // normalize the decimal amount of the two numbers, such that the difference\n        // in their decimal amount is equal to the expected decimal amount\n        // of the result, before we do the calculation\n        //\n        // E.g:\n        // 22/5 = 4.4\n        //\n        // But ethers would return:\n        // 22/5 = 4 (no decimals)\n        //\n        // So before we calculate, we add n padding zeros to the\n        // numerator, where n is the expected decimal amount of the result:\n        // 220/5 = 44\n        //\n        // Normalized to the expected decimal amount of the result\n        // 4.4\n        const normalisedThis = new DecimalBigNumber(this.toString(), _decimals + valueAsDBN._decimals);\n        const quotient = normalisedThis._value.div(valueAsDBN._value);\n        // Return result with the expected output decimal amount\n        return new DecimalBigNumber(quotient, _decimals);\n    }\n    abs() {\n        if (this._value.lt(0)) {\n            return new DecimalBigNumber(this._value.mul(\"-1\"), this._decimals);\n        }\n        else {\n            return this;\n        }\n    }\n    //only works for positive exponents\n    pow(n) {\n        if (n == 0)\n            return new DecimalBigNumber(\"1\");\n        else if (n == 1)\n            return this;\n        else if (this.eq(\"0\") && n !== 0)\n            return new DecimalBigNumber(\"0\");\n        else {\n            var z = new DecimalBigNumber(this._value, this._decimals);\n            //5300000\n            //28090000000000\n            //148877000000000000000\n            for (let i = 1; i < n; i++) {\n                z = z.mul(this);\n            }\n            return z;\n        }\n    }\n}\n//# sourceMappingURL=DecimalBigNumber.js.map"],"names":["parseUnits","formatUnits","commify"],"mappings":"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"}