{"version":3,"file":"TokenValue.esm.js","sources":["../js/utils/DecimalBigNumber.js","../js/classes/TokenValue.js"],"sourcesContent":["import { formatUnits, parseUnits, commify } from \"ethers/lib/utils\";\nexport function assert(value, message) {\n    if (value === false || value === null || typeof value === \"undefined\") {\n        throw new Error(message || \"Assertion failed\");\n    }\n}\n/**\n *\n * @export\n * @class DecimalBigNumber\n */\nexport class DecimalBigNumber {\n    constructor(value, decimals) {\n        if (typeof value === \"string\") {\n            const _value = value.trim() === \"\" || isNaN(Number(value)) ? \"0\" : value;\n            const _decimals = decimals === undefined ? this._inferDecimalAmount(value) : this._ensurePositive(decimals);\n            const formatted = this._setDecimalAmount(_value, _decimals);\n            this._value = parseUnits(formatted, _decimals);\n            this._decimals = _decimals;\n            return;\n        }\n        assert(decimals !== undefined, \"Decimal cannot be undefined\");\n        this._value = value;\n        this._decimals = decimals;\n    }\n    getDecimals() {\n        return this._decimals;\n    }\n    _inferDecimalAmount(value) {\n        const [, decimalStringOrUndefined] = value.split(\".\");\n        return decimalStringOrUndefined?.length || 0;\n    }\n    /**\n     * Sets a value to a specific decimal amount\n     *\n     * Trims unnecessary decimals\n     * Or pads decimals if needed\n     *\n     * @param value Input value as a string\n     * @param decimals Desired decimal amount\n     */\n    _setDecimalAmount(value, decimals) {\n        const [integer, _decimalsOrUndefined] = value.split(\".\");\n        const _decimals = _decimalsOrUndefined || \"\";\n        const paddingRequired = this._ensurePositive(decimals - _decimals.length);\n        return integer + \".\" + _decimals.substring(0, decimals) + \"0\".repeat(paddingRequired);\n    }\n    /**\n     * Ensures the desired decimal amount is positive\n     */\n    _ensurePositive(decimals) {\n        return Math.max(0, decimals);\n    }\n    /**\n     * Converts this value to a BigNumber\n     *\n     * Often used when passing this value as\n     * an argument to a contract method\n     */\n    toBigNumber(decimals) {\n        return decimals === undefined ? this._value : new DecimalBigNumber(this.toString(), decimals)._value;\n    }\n    /**\n     * Converts to a different decimal\n     */\n    reDecimal(decimals) {\n        return decimals === this._decimals ? this : new DecimalBigNumber(this.toString(), decimals);\n    }\n    /**\n     * Converts this value to a string\n     *\n     * By default, the string returned will:\n     * - Have the same decimal amount that it was initialized with\n     * - Have trailing zeroes removed\n     * - Not have thousands separators\n     *\n     * This ensures that the number string is accurate.\n     *\n     * To override any of these settings, add the `args` object as a parameter.\n     *\n     * @param args an object containing any of the properties: decimals, trim, format\n     * @returns a string version of the number\n     */\n    toString({ decimals, trim = true, format = false } = {}) {\n        let result = formatUnits(this._value, this._decimals);\n        // Add thousands separators\n        if (format)\n            result = commify(result);\n        // We default to the number of decimal places specified\n        const _decimals = decimals === undefined ? this._decimals : this._ensurePositive(decimals);\n        result = this._setDecimalAmount(result, _decimals);\n        // We default to trimming trailing zeroes (and decimal points), unless there is an override\n        if (trim)\n            result = result.replace(/(?:\\.|(\\..*?))\\.?0*$/, \"$1\");\n        return result;\n    }\n    /**\n     * @deprecated\n     * Please avoid using this method.\n     * If used for calculations: rather than converting this DecimalBigNumber\n     * \"down\" to a number, convert the other number \"up\" to a DecimalBigNumber.\n     *\n     * Used when performing approximate calculations with\n     * the number where precision __is not__ important.\n     *\n     * Ex: (new DecimalBigNumber(\"100\", 6)).toApproxNumber() => 100\n     */\n    toApproxNumber() {\n        return parseFloat(this.toString());\n    }\n    /**\n     * Determines if the two values are equal\n     */\n    eq(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        // Normalize decimals to the largest of the two values\n        const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n        // Normalize values to the correct decimal amount\n        const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n        const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n        return normalisedThis._value.eq(normalisedValue._value);\n    }\n    /**\n     * Subtracts this value by the value provided\n     */\n    sub(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        // Normalize decimals to the largest of the two values\n        const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n        // Normalize values to the correct decimal amount\n        const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n        const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n        return new DecimalBigNumber(normalisedThis._value.sub(normalisedValue._value), largestDecimalAmount);\n    }\n    /**\n     * Sums this value and the value provided\n     */\n    add(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        // Normalize decimals to the largest of the two values\n        const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n        // Normalize values to the correct decimal amount\n        const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n        const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n        return new DecimalBigNumber(normalisedThis._value.add(normalisedValue._value), largestDecimalAmount);\n    }\n    isPositive() {\n        return this._value.gte(0);\n    }\n    /**\n     * Determines if this value is greater than the provided value\n     */\n    gt(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        // Normalize decimals to the largest of the two values\n        const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n        // Normalize values to the correct decimal amount\n        const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n        const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n        return normalisedThis._value.gt(normalisedValue._value);\n    }\n    /**\n     * Determines if this value is greater than or equal to the provided value\n     */\n    gte(value) {\n        return this.gt(value) || this.eq(value);\n    }\n    /**\n     * Determines if this value is less than the provided value\n     */\n    lt(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        // Normalize decimals to the largest of the two values\n        const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n        // Normalize values to the correct decimal amount\n        const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n        const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n        return normalisedThis._value.lt(normalisedValue._value);\n    }\n    /**\n     * Determines if this value is less than or equal to the provided value\n     */\n    lte(value) {\n        return this.lt(value) || this.eq(value);\n    }\n    /**\n     * Multiplies this value by the provided value\n     */\n    mul(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        const product = this._value.mul(valueAsDBN._value);\n        // Multiplying two BigNumbers produces a product with a decimal\n        // amount equal to the sum of the decimal amounts of the two input numbers\n        return new DecimalBigNumber(product, this._decimals + valueAsDBN._decimals);\n    }\n    mod(value) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        return new DecimalBigNumber(this._value.mod(valueAsDBN._value), this._decimals);\n    }\n    mulMod(value, denominator) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        const denominatorAsDBN = denominator instanceof DecimalBigNumber ? denominator : new DecimalBigNumber(denominator);\n        const result = this._value.mul(valueAsDBN._value).mod(denominatorAsDBN._value);\n        return new DecimalBigNumber(result, this._decimals);\n    }\n    mulDiv(value, denominator, rounding) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        const denominatorAsDBN = denominator instanceof DecimalBigNumber ? denominator : new DecimalBigNumber(denominator);\n        let result = this._value.mul(valueAsDBN._value).div(denominatorAsDBN._value);\n        if (rounding === \"up\" && this.mulMod(value, denominator).gt(\"0\")) {\n            result = result.add(1);\n        }\n        return new DecimalBigNumber(result, this._decimals);\n    }\n    /**\n     * Divides this value by the provided value\n     *\n     * By default, this returns a value whose decimal amount is equal\n     * to the sum of the decimal amounts of the two values used.\n     * If this isn't enough, you can specify a desired\n     * decimal amount using the second function argument.\n     *\n     * @param decimals The expected decimal amount of the output value\n     */\n    div(value, decimals) {\n        const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n        const _decimals = decimals === undefined ? this._decimals + valueAsDBN._decimals : this._ensurePositive(decimals);\n        // When we divide two BigNumbers, the result will never\n        // include any decimal places because BigNumber only deals\n        // with whole integer values. Therefore, in order for us to\n        // include a specific decimal amount in our calculation, we need to\n        // normalize the decimal amount of the two numbers, such that the difference\n        // in their decimal amount is equal to the expected decimal amount\n        // of the result, before we do the calculation\n        //\n        // E.g:\n        // 22/5 = 4.4\n        //\n        // But ethers would return:\n        // 22/5 = 4 (no decimals)\n        //\n        // So before we calculate, we add n padding zeros to the\n        // numerator, where n is the expected decimal amount of the result:\n        // 220/5 = 44\n        //\n        // Normalized to the expected decimal amount of the result\n        // 4.4\n        const normalisedThis = new DecimalBigNumber(this.toString(), _decimals + valueAsDBN._decimals);\n        const quotient = normalisedThis._value.div(valueAsDBN._value);\n        // Return result with the expected output decimal amount\n        return new DecimalBigNumber(quotient, _decimals);\n    }\n    abs() {\n        if (this._value.lt(0)) {\n            return new DecimalBigNumber(this._value.mul(\"-1\"), this._decimals);\n        }\n        else {\n            return this;\n        }\n    }\n    //only works for positive exponents\n    pow(n) {\n        if (n == 0)\n            return new DecimalBigNumber(\"1\");\n        else if (n == 1)\n            return this;\n        else if (this.eq(\"0\") && n !== 0)\n            return new DecimalBigNumber(\"0\");\n        else {\n            var z = new DecimalBigNumber(this._value, this._decimals);\n            //5300000\n            //28090000000000\n            //148877000000000000000\n            for (let i = 1; i < n; i++) {\n                z = z.mul(this);\n            }\n            return z;\n        }\n    }\n}\n//# sourceMappingURL=DecimalBigNumber.js.map","import { BigNumber, utils, constants } from \"ethers\";\nimport { DecimalBigNumber } from \"../utils/DecimalBigNumber\";\nconst blocker = {};\nexport class TokenValue {\n    constructor(_blocker, _bigNumber, decimals) {\n        if (_blocker !== blocker)\n            throw new Error(\"Do not create an instance via the constructor. Use the .from...() methods\");\n        this.decimals = decimals;\n        this.value = new DecimalBigNumber(_bigNumber, decimals);\n        // make values immutable\n        Object.defineProperty(this, \"decimals\", { configurable: false, writable: false });\n        Object.defineProperty(this, \"value\", { configurable: false, writable: false });\n    }\n    /**\n     * Create a TokenValue from string, number, or BigNumber values that represent a **human** readable form.\n     * For example: \"3\" ETH, or \"4.5\" beans.\n     * If your value is a blockchain value, for ex 3e18 or 4500000, use `fromBlockchain()` method instead.\n     *\n     * Example: `fromHuman('3.14', 6)` means 3.14 BEAN tokens, and would be represented as 3140000 on the blockchain\n     *\n     * Warning: Even thought we support supplying the value as a BigNumber, make sure you really mean to use it here.\n     * If your input is a BigNumber, you most likely want to use `.fromBlockchain()`\n     *\n     * @param value The amount, as a human readable value, in string, number or BigNumber form.\n     * @param decimals The number of decimals this TokenValue should be stored with. For ex, 6 for BEAN or 18 for ETH\n     * @returns a TokenValue\n     */\n    static fromHuman(value, decimals) {\n        if (typeof value === \"string\")\n            return TokenValue.fromString(value, decimals);\n        if (typeof value === \"number\")\n            return TokenValue.fromString(value.toString(), decimals);\n        if (value instanceof BigNumber) {\n            // TODO: are we ok with this warning? should we add ability to ignore it?\n            console.warn(\"WARNING: calling TokenValue.fromHuman(BigNumber). This may have unexpected results. Are you sure you didn't mean TokenValue.fromBlockchain(BigNumber)?\");\n            return TokenValue.fromString(value.toString(), decimals);\n        }\n        throw new Error(\"Invalid value parameter\");\n    }\n    /**\n     * Create a TokenValue from string, number, or BigNumber values that represent a **blockhain** value.\n     * For example: 3e18 ETH, or 4500000 beans.\n     * If your value is a human readable value, for ex 5 ETH  or 3.14 BEAN, use `fromHuman()` method instead.\n     *\n     * Example: `fromBlockchain('3140000', 6)` means 3.14 BEAN tokens, and would be represented as 3140000 on the blockchain\n     * @param value The amount, as a human readable value, in string, number or BigNumber form.\n     * @param decimals The number of decimals this TokenValue should be stored with. For ex, 6 for BEAN or 18 for ETH\n     * @returns a TokenValue\n     */\n    static fromBlockchain(value, decimals) {\n        if (typeof value === \"string\" || typeof value === \"number\") {\n            const units = utils.formatUnits(value, decimals);\n            return TokenValue.fromString(units, decimals);\n        }\n        if (value instanceof BigNumber)\n            return TokenValue.fromBigNumber(value, decimals);\n        throw new Error(\"Invalid value parameter\");\n    }\n    /**\n     * Create a TokenValue from another decimal-supporting object: DecimalBigNumber or TokenValue.\n     *\n     * @param value The amount\n     * @returns a TokenValue\n     */\n    static from(value) {\n        if (value instanceof DecimalBigNumber) {\n            return new TokenValue(blocker, value.toBigNumber(), value.getDecimals());\n        }\n        if (value instanceof TokenValue)\n            return value;\n        throw new Error('Invalid \"value\" parameter');\n    }\n    static fromBigNumber(value, decimals) {\n        return new TokenValue(blocker, value, decimals);\n    }\n    static fromString(value, decimals) {\n        if (!value) {\n            throw new Error(\"Must provide value to BigNumber.fromHuman(value,decimals)\");\n        }\n        if (decimals == undefined || decimals == null) {\n            throw new Error(\"Must provide decimals to BigNumber.fromHuman(value,decimals)\");\n        }\n        let [int, safeDecimals] = value.split(\".\");\n        if (safeDecimals && safeDecimals.length > decimals) {\n            safeDecimals = safeDecimals.substring(0, decimals);\n        }\n        const safeValue = safeDecimals ? `${int}.${safeDecimals}` : int;\n        const result = utils.parseUnits(safeValue, decimals);\n        return TokenValue.fromBigNumber(result, decimals);\n    }\n    ////// Utility Functions //////\n    toBigNumber() {\n        return this.value.toBigNumber();\n    }\n    toBlockchain() {\n        return this.value.toBigNumber().toString();\n    }\n    /**\n     * @deprecated\n     * Ambiguous function. This exists only as a safety, otherwise the .toString()\n     * call would go to Object.toString().\n     * @returns\n     */\n    toString() {\n        return this.toBlockchain();\n    }\n    /**\n     * Returns a human readable string, for example \"3.14\"\n     * @returns string\n     */\n    toHuman() {\n        return this.value.toString();\n    }\n    // Used mostly by the math functions to normalize the input\n    toDBN(num) {\n        if (num instanceof TokenValue) {\n            return TokenValue.from(num).value;\n        }\n        else if (num instanceof BigNumber) {\n            return TokenValue.fromBlockchain(num, 0).value;\n        }\n        else {\n            const decimals = num.toString().split(\".\")[1]?.length || 0;\n            return TokenValue.fromHuman(num, decimals).value;\n        }\n    }\n    /**\n     * Returns a new TokenValue with the number of decimals set to the new value\n     * @param decimals\n     */\n    changeDecimals(decimals) {\n        return TokenValue.fromBigNumber(this.value.toBigNumber(decimals), decimals);\n    }\n    ////// Math Functions //////\n    add(num) {\n        return TokenValue.from(this.value.add(this.toDBN(num)));\n    }\n    sub(num) {\n        return TokenValue.from(this.value.sub(this.toDBN(num)));\n    }\n    mod(num) {\n        // num needs to have the same number of decimals as THIS\n        let n = this.toDBN(num).reDecimal(this.decimals);\n        return TokenValue.from(this.value.mod(n));\n    }\n    mul(num) {\n        return TokenValue.from(this.value.mul(this.toDBN(num)).reDecimal(this.decimals));\n    }\n    mulMod(num, denominator) {\n        return TokenValue.from(this.value.mul(this.toDBN(num)).mod(this.toDBN(denominator).reDecimal(this.decimals)));\n    }\n    mulDiv(num, denominator, rounding) {\n        return TokenValue.from(this.value.mulDiv(this.toDBN(num), this.toDBN(denominator), rounding).reDecimal(this.decimals));\n    }\n    div(num, decimals) {\n        return TokenValue.from(this.value.div(this.toDBN(num), decimals));\n    }\n    eq(num) {\n        return this.value.eq(this.toDBN(num));\n    }\n    gt(num) {\n        return this.value.gt(this.toDBN(num));\n    }\n    gte(num) {\n        return this.value.gte(this.toDBN(num));\n    }\n    lt(num) {\n        return this.value.lt(this.toDBN(num));\n    }\n    lte(num) {\n        return this.value.lte(this.toDBN(num));\n    }\n    static min(...values) {\n        return values.reduce((acc, num) => (acc.lt(num) ? acc : num));\n    }\n    static max(...values) {\n        return values.reduce((acc, num) => (acc.gt(num) ? acc : num));\n    }\n    abs() {\n        return TokenValue.from(this.value.abs());\n    }\n    pow(num) {\n        return TokenValue.from(this.value.pow(num));\n    }\n    pct(num) {\n        const minDecimals = this.decimals < 2 ? 2 : this.decimals;\n        if (num < 0)\n            throw new Error(\"Percent value must be bigger than 0\");\n        return TokenValue.from(this.value.mul(num.toString()).div(\"100\", minDecimals));\n    }\n}\nTokenValue.ZERO = TokenValue.fromHuman(0, 0);\nTokenValue.NEGATIVE_ONE = TokenValue.fromHuman(-1, 0);\nTokenValue.ONE = TokenValue.fromHuman(1, 0);\nTokenValue.MAX_UINT32 = TokenValue.fromHuman(4294967295, 0);\nTokenValue.MAX_UINT256 = TokenValue.fromBlockchain(constants.MaxUint256, 0);\n//# sourceMappingURL=TokenValue.js.map"],"names":[],"mappings":"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"}